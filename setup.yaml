# Install Kuma https://kuma.io/docs/1.2.2/installation/kubernetes/

kumactl install control-plane | kubectl apply -f -


# Kuma control plane dashboard http://127.0.0.1:5681/gui
kubectl port-forward svc/kuma-control-plane -n kuma-system 5681:5681

# Install app

kubectl apply -f demo.yaml
kubectl apply -f demo.v2.yaml


# Install Kong

$ kubectl apply -f https://bit.ly/k4k8s

# Add Label to NS

$ kubectl annotate ns kong kuma.io/sidecar-injection=enabled

# Trigger sidecar

$ kubectl delete pod --all -n kong

# Get Url to Kong proxy

minikube service -n kong kong-proxy -p kuma-demo --url

# Create the kong-jwt2header config map.  NOTE this ends up pointing to the local plugin folder and copying this to the Kong pod

kubectl create configmap kong-jwt2header --from-file=plugin -n kong

# Create the app-user-jwt

kubectl create secret \
  generic app-user-jwt  \
  --from-literal=kongCredType=jwt  \
  --from-literal=key="user-issuer" \
  --from-literal=algorithm=RS256 \
  --from-literal=rsa_public_key="-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0RmSrd7d4EEMQpaT9/mk
CoYVFNOb/LxUgZsyZ85hz6Gc5IeVtAGr+tk9c5g+bZ+mrfDhg49ZmW54pdksIL3d
x+9IMMsd9CtvRes0jb/DMEEyInqxCkP14xttC77yctnoCQmLxKlOGI3OWH7L8qwA
k2a/DTkfsH1c2s6qdA9HPiN6Nw0Z6KRIO/eaipXZipRS737TVInH08iuVviYWnxm
R1RXZdT4dF6bA6QsM7jGVm7+kP4HcHza+LiFoAAnWahdKWpwgw3gmPXUgVY46nBF
38gE6od4O2oHRzCF9/mWgyEsE9yeGgggf3Rhb9I7QjhMOw2lNwlXJYTyopG5tBIX
9G8j93MgEKeVlBoiS1HOpv3gFY9g0SfjrXaNG+55ym/8hNwD86FAqKRDIcewJq5h
fZaeuhLE9SOQvVHkPNgPsuMgJSulGV33TA6z96QgBGOcR+iHeUH1tbTJEOBuv71v
5bKtRxSd+OhagJ9NdB0cCSQusvnMdbWyxAq9fkoKI3hZrVuIwJ5rXsKi2lfXgAUv
XK9NnZThpx+UBz71spfr3D7ujSWKog5+LTxCQjqs8ZrkmOPet5tyrJCthJlcN/4P
4Sv+++5oauA2luvdaCBzlivDhoEqKhe/ZLxcml8NS+f0iA828DI3g8LQRpry+3Yz
bGoUvsMa1k9EPVVpbV+Vy9sCAwEAAQ==
-----END PUBLIC KEY-----"

# Create the Consumer with the secret


echo "apiVersion: configuration.konghq.com/v1
kind: KongConsumer
metadata:
  name: plain-user
  annotations:
    kubernetes.io/ingress.class: kong
username: plain-user
credentials:
  - app-user-jwt
" | kubectl apply -f -

# Create the app-jwt plugin NOTE this is the plugin that verifies the jwt 


echo "apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: app-jwt
  namespace: kuma-demo
config: 
  secret_is_base64: false
  run_on_preflight: true
plugin: jwt" | kubectl apply -f -

# Create the jwt-2-header custom plugin


echo "apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: jwt-2-header
  namespace: kuma-demo
plugin: kong-jwt2header" | kubectl apply -f -

# Add Ingress Rule NOTE both plugins are registered

echo "apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: demo-ingress
  namespace: kuma-demo
  annotations:
    konghq.com/plugins: app-jwt,jwt-2-header
    kubernetes.io/ingress.class: kong
    konghq.com/strip-path: 'true'
spec:
        backend:
          serviceName: demo-app
          servicePort: 5000" | kubectl apply -f -

# Create the Mesh aht includes Loki for traffic logs

echo "apiVersion: kuma.io/v1alpha1
kind: Mesh
metadata:
  name: default
spec:
  logging:
    defaultBackend: loki
    backends:
      - name: loki
        type: file
        format: '{"start_time": "%START_TIME%", "source": "%KUMA_SOURCE_SERVICE%", "destination": "%KUMA_DESTINATION_SERVICE%", "source_address": "%KUMA_SOURCE_ADDRESS_WITHOUT_PORT%", "destination_address": "%UPSTREAM_HOST%", "duration_millis": "%DURATION%", "bytes_received": "%BYTES_RECEIVED%", "bytes_sent": "%BYTES_SENT%", "x_name": "%REQ\(X-Name\)%", "x_is_admin": "%REQ\(X-Admin\)%"}'
        conf:
          path: /dev/stdout" | kubectl apply -f -


# Create a TrafficLog to capture the traffic from kong to the demo app
echo "apiVersion: kuma.io/v1alpha1
kind: TrafficLog
metadata:
  name: gateway-to-app-traffic
mesh: default
spec:
  sources:
    - match:
        kuma.io/service: kong-proxy_kong_svc_80
  destinations:
    - match:
        kuma.io/service: demo-app_kuma-demo_svc_5000
  conf:
    backend: loki" | kubectl apply -f -

# sample Jwt

https://jwt.io/#debugger-io?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiaXNzIjoidXNlci1pc3N1ZXIifQ.dTgMm42FoR6bvoonnrf_XG5fsOHFZS2xmC07DTMR1P085-nT9P0TRk8cxuvnqhXEAR3ZG9X4Vgz5RManJe4Y4wltikG0a4pM0FRz4wN4RYjy6ny41_PfxjXlYv0MjwaGv7tmycNrzQotGhXjfuiTRYZ5Yx2nZqUb69VqcQSdJMNpymzdmo085k_kqE59thPv8FY3UBxoidzEQVPFFH7ZxhfF64x-apam5LdXUggy_zF62c3oZzABY05E-11NoyTHQfGWkXmu4Y95f8QqpufaCZvE7yOJ6zCxd-gFIgM_iSuu9CwvMH_PEhKg6jOV5kI7SPi0xTmn4FVo2cKxESiPxVzE8LNsys-hMzQ0JnG-2R_rvAt-80iThU7FqIuifdCgwr0oPv8JnpHzh4Zqin27QmcUciro5JUBk6QAchpW6s348f5sA4CJih7X0V0jXY15QqaCGE6VAVdVS0rtU2WV6G1U_OnjS0AWrz-YPlkVta3iStmtGrjT-K2UPlBjOxjhOMZC475Tn4gaiS-vnAnmsk8qXUdeB-ablpDXeuXxVare3h_d2XzB3ZxQpAtjbCwlY2vXG7TcKNVSttp-YfnljVtn3uBmNtrAZXBLguKmH9E4L4heluZ5_YLfD9BAHcFAUjnb25-96Sr85_wFoRstYdVHY-3izSiIqPTrpBnJuh4&publicKey=-----BEGIN%20PUBLIC%20KEY-----%0AMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0RmSrd7d4EEMQpaT9%2Fmk%0ACoYVFNOb%2FLxUgZsyZ85hz6Gc5IeVtAGr%2Btk9c5g%2BbZ%2BmrfDhg49ZmW54pdksIL3d%0Ax%2B9IMMsd9CtvRes0jb%2FDMEEyInqxCkP14xttC77yctnoCQmLxKlOGI3OWH7L8qwA%0Ak2a%2FDTkfsH1c2s6qdA9HPiN6Nw0Z6KRIO%2FeaipXZipRS737TVInH08iuVviYWnxm%0AR1RXZdT4dF6bA6QsM7jGVm7%2BkP4HcHza%2BLiFoAAnWahdKWpwgw3gmPXUgVY46nBF%0A38gE6od4O2oHRzCF9%2FmWgyEsE9yeGgggf3Rhb9I7QjhMOw2lNwlXJYTyopG5tBIX%0A9G8j93MgEKeVlBoiS1HOpv3gFY9g0SfjrXaNG%2B55ym%2F8hNwD86FAqKRDIcewJq5h%0AfZaeuhLE9SOQvVHkPNgPsuMgJSulGV33TA6z96QgBGOcR%2BiHeUH1tbTJEOBuv71v%0A5bKtRxSd%2BOhagJ9NdB0cCSQusvnMdbWyxAq9fkoKI3hZrVuIwJ5rXsKi2lfXgAUv%0AXK9NnZThpx%2BUBz71spfr3D7ujSWKog5%2BLTxCQjqs8ZrkmOPet5tyrJCthJlcN%2F4P%0A4Sv%2B%2B%2B5oauA2luvdaCBzlivDhoEqKhe%2FZLxcml8NS%2Bf0iA828DI3g8LQRpry%2B3Yz%0AbGoUvsMa1k9EPVVpbV%2BVy9sCAwEAAQ%3D%3D%0A-----END%20PUBLIC%20KEY-----%0A





echo "apiVersion: kuma.io/v1alpha1
kind: Mesh
metadata:
  name: default
spec:
  mtls:
    enabledBackend: ca-1
    backends:
    - name: ca-1
      type: builtin
  metrics:
    enabledBackend: prometheus-1
    backends:
    - name: prometheus-1
      type: prometheus
      conf:
        port: 5670
        path: /metrics
        skipMTLS: false
        tags: # tags that can be referred in Traffic Permission  
          kuma.io/service: dataplane-metrics" | kubectl apply -f -

